---
import type { HTMLAttributes } from 'astro/types';
import HierarchyList, {
	type Header,
	type Item as VerboseItem,
	type ItemBody as VerboseItemBody,
	type ExtraNode,
} from '$/components/HierarchyList.astro';
import path from 'node:path';

type ItemBodyObject = { name: string; description?: string; href?: string; } & HTMLAttributes<'a'>;
export type ItemBody = string | ItemBodyObject;

// prettier-ignore
// biome-ignore format: Astro doesn't like it when a type starts with |
export type Item = ExtraNode<ItemBodyObject, string>;

interface Props extends HTMLAttributes<'div'> {
	header?: Header;
	items: Item[];
}

const { items: links, ...rest } = Astro.props;

const items: VerboseItem[] = links.map(link => formatLink(link));

function formatLink(link: Item, base = '/'): VerboseItem {
	if (typeof link === 'object' && link.children) {
		const {children, ...rest} = link;
		const body = formatLinkBody(rest, base);

		// @ts-ignore props and href must exist after formatLinkBody
		const newBase: string = rest.href;

		return {
			...body,
			children: children.map(link => formatLink(link, newBase)),
		};
	} else {
		return formatLinkBody(link, base);
	}
}

function formatLinkBody(body: ItemBody, base: string): VerboseItemBody {
	if (typeof body === 'string') {
		return { name: body, as: 'a', props: { href: path.join(base, body) } };
	} else {
		const { name, description, ...props } = body;
		if (!props.href) {
			props.href = path.join(base, name);
		}

		return {
			name,
			description,
			as: 'a',
			props,
		};
	}
}
---

<HierarchyList {items} {...rest} />
