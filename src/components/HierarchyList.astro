---
import { type AstroComponentFactory } from 'astro/runtime/server/index.js';
import type { HTMLAttributes, HTMLTag } from 'astro/types';

export interface ItemBody {
	name: string;
	description?: string;
	as?: HTMLTag | AstroComponentFactory;
	props?: Record<string, unknown>;
}

export type Header = string | { level: number; body: string };
export type Node<T> = T & { children?: Node<T>[] };
export type Item = Node<ItemBody>;

// prettier-ignore
// biome-ignore format: Astro doesn't like it when a type starts with |
export type ExtraNode<T, Extra = never> = (Extra | T) & { children?: (Extra | ExtraNode<T>)[] };

type Levels = boolean[];

interface Props extends HTMLAttributes<'div'> {
	header?: Header;
	items: Item[];
	levels?: Levels;
}

const { header, items, levels = [], class: className, ...rest } = Astro.props;

const isRoot = levels.length === 0;

const bars = levels.map(isActive => (isActive ? '│ ' : '  ')).join('');

const HeaderTag =
	typeof header === 'string' || !header?.level ? 'h3' : `h${header.level}`;
const headerBody =
	(header && (typeof header === 'string' ? header : header.body)) || '';

const ContainerTag = isRoot ? 'div' : Fragment;

const prefix = `"${bars}├─/"`;
const endPrefix = `"${bars}└─/"`;

function processLevels(levels: Levels, last: boolean): Levels {
	const newLevels = [...levels, !last];
	return newLevels;
}
---

<ContainerTag class={className} {...rest}>
	{/* @ts-ignore Werid Astro funk */}
	{isRoot && <HeaderTag class="header">/{headerBody}</HeaderTag>}
	<ul class:list={[{ root: isRoot }]}>
		{
			items.map((item, i) => {
				const Tag = item.as ?? 'p';
				const isLast = i + 1 === items.length;

				// @ts-ignore Props type is hard here
				const { class: className, ...rest } = item.props;

				return (
					<li data-last={isLast}>
						<div class="entry">
							<Tag class:list={[className, 'name']} {...rest}>
								{item.name}
							</Tag>
							{item.description && (
								<>
									<div class="line" aria-hidden="true" />
									<p class="description">
										{item.description}
									</p>
								</>
							)}
						</div>
						{item.children && (
							<Astro.self
								items={item.children}
								levels={processLevels(levels, isLast)}
							/>
						)}
					</li>
				);
			})
		}
	</ul>
</ContainerTag>

<style define:vars={{ prefix, 'end-prefix': endPrefix }}>
	.header {
		margin-block-end: 0.25rem;
	}

	ul {
		padding-inline-start: 2ch;
		font-family: var(--ff-mono);
		line-height: 1.3;
		list-style-type: var(--prefix);
	}

	ul.root {
		margin-inline-start: 0.5ch;
	}

	ul:not(:only-child) {
		margin-block-start: 0;
	}

	.entry {
		display: flex;
		flex-direction: row;
	}

	.line {
		flex: auto;
		margin-inline: 1rem;
		border: 1px dashed var(--cl-secondary);
		align-self: center;
	}

	.name {
		margin-block: 0;
	}

	.description {
		margin: 0;
		color: var(--cl-secondary);
	}

	.description::before {
		content: '# ';
	}

	li[data-last='true'] {
		list-style-type: var(--end-prefix);
	}
</style>
