---
import type { HTMLAttributes } from 'astro/types';

export type Item = string | { name: string; children: Item[] };

type Levels = boolean[];

interface Props extends HTMLAttributes<'ul'> {
	items: Item[];
	levels?: Levels;
}

const { items, levels = [], class: className, ...rest } = Astro.props;

const bars = levels.map((isActive) => (isActive ? '│ ' : '  ')).join('');

const prefix = `"${bars}├─/"`;
const endPrefix = `"${bars}└─/"`;

function processLevels(levels: Levels, last: boolean, item: unknown): Levels {
	const newLevels = [...levels, !last];
	console.log({ item, last, levels, newLevels });
	return newLevels;
}
---

<ul class:list={[className, { root: levels.length === 0 }]} {...rest}>
	{
		items.map((item, i) => (
			<li data-last={i + 1 === items.length}>
				{typeof item === 'string' ? (
					item
				) : (
					<>
						{item.name}
						<Astro.self
							items={item.children}
							levels={processLevels(
								levels,
								i + 1 === items.length,
								item,
							)}
						/>
					</>
				)}
			</li>
		))
	}
</ul>

<style define:vars={{ prefix, 'end-prefix': endPrefix }}>
	ul {
		padding-inline-start: 2ch;
		font-family: var(--ff-mono);
		line-height: 1.3;
		list-style-type: var(--prefix);
	}

	li[data-last='true'] {
		list-style-type: var(--end-prefix);
	}
</style>
