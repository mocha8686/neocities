---
layout: base.webc
fg: hsl(209deg 70% 86% / 100%);
bg: hsl(208deg 52% 4% / 100%);
accent: hsl(208deg 100% 80%);
secondary: hsl(208deg 19% 55%);
---

<div :x-data="JSON.stringify({ settings: defaultSettings })" x-init="loadSettings(settings)" x-bind:class="{ 'enable-rain': settings['rain'] }" @raw="content"></div>

<script>
	function loadSettings(settings) {
		const settingsString = window.localStorage.getItem('settings');
		if (!settingsString) {
			window.localStorage.setItem('settings', JSON.stringify(settings));
			return;
		}

		const effects = Object.keys(settings);

		try {
			const windowSettings = JSON.parse(settingsString);

			for (const effect of effects) {
				if (effect in windowSettings) {
					settings[effect] = windowSettings[effect];
				}
			}
		} catch (e) {
			console.error(e);
			window.localStorage.setItem('settings', JSON.stringify(settings));
		}
	}
</script>

<script type="module" webc:keep>
	import 'normalize.css/normalize.css';
	import 'katex/dist/katex.min.css';
	import '@fontsource/michroma';
	import '@fontsource/shippori-mincho';
	import '@fontsource/kosugi-maru';
	import '@fontsource/fusion-pixel-12px-proportional-jp';
	import '@fontsource/nabla';
</script>

<style webc:is="style" webc:type="js">
`
:root {
	--cl-fg: ${fg};
	--cl-bg: ${bg};
	--cl-accent: ${accent};
	--cl-secondary: ${secondary};
}
`
</style>

<style>
	/* stylelint-disable custom-property-empty-line-before */
	:root {

		--ff-main: 'Shippori Mincho', 'Times New Roman', serif;
		--ff-header: 'Michroma', sans-serif;
		--ff-accent: 'Kosugi Maru', sans-serif;
		--ff-pixel: 'Fusion Pixel 12px Proportional JP', monospace;
		--ff-mono: monospace;
		--ff-special: 'Nabla', var(--ff-main);
		--ff-accent-word: var(--ff-accent);
		--ff-accent-symbol: var(--ff-pixel);

		--fs-accent: 1.2rem;
		--fs-secondary: 0.85rem;
		--fs-timestamp: var(--fs-secondary);

		--bd-section: 2px outset var(--cl-accent);

		--cu-default: url('/assets/default.png') 7 1, auto;
		--cu-pointer: url('/assets/pointer.png') 13 1, pointer;

		--z-bg: -1000;
		--z-fx: 1000;

		--z-crt: var(--z-fx);
	}

	body {
		font-family: var(--ff-main);
		color: var(--cl-fg);
	}

	body::before {
		content: '';

		position: fixed;
		z-index: var(--z-bg);
		inset: 0;

		background: var(--cl-bg);
	}

	body:has(> .enable-rain)::before {
		background:
			url('/assets/pixel_rain.gif') center/contain repeat-x,
			var(--cl-bg);
	}

	body,
	label,
	button,
	input[type='checkbox'],
	input[type='radio'] {
		cursor: var(--cu-default);
	}

	* {
		scrollbar-color: var(--cl-accent) black;
		box-sizing: border-box;
	}

	::-webkit-scrollbar {
		background: var(--cl-accent);
	}

	::-webkit-scrollbar-thumb {
		background: black;
	}

	a,
	area {
		cursor: var(--cu-pointer);
		color: var(--cl-accent);
	}

	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		font-family: var(--ff-header);
		text-transform: uppercase;
	}

	hr {
		border-color: var(--cl-accent);
	}

	code,
	pre {
		font-family: var(--ff-mono);
	}

	button {
		color: inherit;
		background-color: var(--cl-bg);
	}

	:focus-visible {
		outline: 2px solid color-mix(in srgb-linear, white, var(--cl-accent));
	}
</style>
